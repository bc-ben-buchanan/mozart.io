<h1>Mozart.Ajax</h1>
<p>The Ajax module patches and extends <a href="/apidocs/model">Mozart.Model</a> with a number of methods to provide AJAX model synchronization to a RESTful server. Once a model is registered by calling its <code>ajax()</code> method, the synchronisation happens automatically in the background when instances of that model have <code>save()</code> called - all records can be read from the server with the <code>loadAll()</code> method, or individual records can be loaded given their server ids with the <code>load(id)</code> method.</p>
<p><strong>Note:</strong> The instance methods exist on <a href="/apidocs/model">Mozart.Model</a>. </p>
<h2>Instance Methods</h2>
	<h3>ajax(options)</h3>
	<p>Registers the model for AJAX. <code>options</code> is a map of the following:</p>
	<ul class="list">
		<li><strong>url</strong> - The URL to communicate with</li>
		<li><strong>plural</strong> - The plural model name.</li>
	</ul>
	<p><strong>Note:</strong> Please see <a href="/ajax_demo">Ajax Demo</a> for more information</p>
	<h3>registerServerId(id,serverId)</h3>
	<p>Associate the given client <code>id</code> with the given <code>serverId</code>.</p>
	<h3>unRegisterServerId(id,serverId)</h3>
	<p>Disassociate the given client <code>id</code> from the given <code>serverId</code>.</p>
	<h3>getServerId(id)</h3>
	<p>Return the server id (if registered) for the given client <code>id</code>.</p>
	<h3>getClientId(serverId)</h3>
	<p>Return the client id for the given client <code>serverId</code> (if registered).</p>
	<h3>toServerObject(instance)</h3>
	<p>Return a javascript map of the supplied <code>instance</code> attributes and values, with each foreign key translated to its appropriate server Id.</p>
	<h3>toClientObject(serverObject)</h3>
	<p>Return a javascript map of the supplied <code>serverObject</code> attributes and values, with each foreign key translated to its appropriate client Id.</p>
	<h3>loadServer(instance)</h3>
	<p>Call <code>load()</code> for the supplied <code>instance</code>.</p>
	<h3>createServer(instance)</h3>
	<p>Call <code>createAjax()</code> for the supplied <code>instance</code>.</p>
	<h3>updateServer(instance)</h3>
	<p>Call <code>updateAjax()</code> for the supplied <code>instance</code>.</p>
	<h3>destroyServer(instance)</h3>
	<p>Call <code>destroyAjax()</code> for the supplied <code>instance</code>.</p>
	<h3>loadAll()</h3>
	<p>Initiate an Ajax GET for all records.</p>
	<h3>load(serverId)</h3>
	<p>Initiate an Ajax GET for the supplied <code>instance</code>.</p>
	<h3>createAjax(clientId, data)</h3>
	<p>Initiate an Ajax POST for the supplied <code>clientId</code> with the supplied <code>data</code>.</p>
	<h3>updateAjax(serverId, clientId, data)</h3>
	<p>Initiate an Ajax PUT on the supplied <code>serverId</code> with the supplied <code>data</code>.</p>
	<h3>destroyAjax(serverId, clientId)</h3>
	<p>Initiate an Ajax DELETE for the supplied <code>serverId</code>.</p>
<h2>Events</h2>
	<h3>loadAllComplete</h3>
	<p>Triggered after all records have been loaded from an Ajax response initiated by <code>loadAll()</code>.</p>
	<h3>loadComplete</h3>
	<p>Parameters: <code>instance</code></p>
	<p>Triggered when an instance has been loaded from an Ajax response initiated by <code>loadServer()</code>, <code>load()</code> or the Instance method <code>load</code>.</p>
	<h3>createComplete</h3>
	<p>Parameters: <code>instance</code></p>
	<p>Triggered when an instance has been updated on the server by Ajax, initiated by <code>createServer()</code>, <code>createAjax()</code> or the Instance method <code>save</code> on a new instance.</p>
	<h3>updateComplete</h3>
	<p>Parameters: <code>instance</code></p>
	<p>Triggered when an instance has been updated on the server by Ajax, initiated by <code>updateServer()</code>, <code>updateAjax()</code> or the Instance method <code>save</code> on an existing instance.</p>
	<h3>destroyComplete</h3>
	<p>Parameters: <code>instance</code></p>
	<p>Triggered when an instance has been deleted on the server by Ajax, initiated by <code>destroyServer()</code>, <code>destroyAjax()</code> or the Instance method <code>destroy</code>.</p>
<h2>Private Methods</h2>
	<h3>_processLoad(data,model,jqXHR)</h3>
	<p>Maps the object <code>data</code> to an instance of <code>model</code>, either creating the instance in the store or updating an existing instance if one exists for the server Id data.id.</p>