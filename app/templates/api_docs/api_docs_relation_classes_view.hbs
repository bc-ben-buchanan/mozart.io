<h1>Relation Classes</h1>

<p>The Relation classes are as follows:</p>
<ul>
	<li><strong>Mozart.OneToManyCollection</strong></li>
	<li><strong>Mozart.OneToManyPolyCollection</strong></li>
	<li><strong>Mozart.ManyToManyCollection</strong></li>
	<li><strong>Mozart.ManyToManyPolyCollection</strong></li>
	<li><strong>Mozart.ManyToManyPolyReverseCollection</strong></li>
</ul>

<p>Full documentation on how relations in mozart work can be found in the relevant guide <a href="/guides/understanding_relations">Understanding Relations</a>.</p>

<h2>Common Relation Class Interface</h2>
<p>All of the relation classes support the same methods, as below:</p>

<h3>all(values)</h3>
<p>Return all associated instances as an array.</p>

<h3>allAsMap(values)</h3>
<p>Return all associated instances as a map of id => instance.</p>

<h3>count()</h3>
<p>Return the number of associated instances.</p>

<h3>add(instance)</h3>
<p>Associate the specified instance with this relation instance's owner (the model instance that created this relation class), i.e. set all relevant foreign keys, or create a link model instance.</p>

<h3>remove(instance)</h3>
<p>Disassociate the specified instance with this relation instance's owner (the model instance that created this relation class), i.e. clear all relevant foreign keys, or destory the relevant link model instance.</p>

<h3>contains(instance)</h3>
<p>Returns <code>true</code> if the specified model is associated with this relation, <code>false</code> if not.</p>

<h3>createFromValues(values)</h3>
<p>Create a new stored instance for this model, by calling <code>initInstance</code> with the supplied values, and calling <code>save()</code> on it. Any relevant foreign keys to associate the new model with this relation instance's owner will also be set or a relevant link model instance will be created, i.e. the new instance will be assoicated in the relation.</p>

<h2>Creating Relations</h2>
<p>The model methods to create thse relations are documented under <a href="/apidocs/model">Mozart.Model</a>.</p>