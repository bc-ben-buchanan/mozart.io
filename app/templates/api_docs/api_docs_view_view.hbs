<h1>Mozart.View</h1>
<p><strong>Extends:</strong> <a href="/apidocs/mzt_object">Mozart.MztObject</a><p>
<p>Views are the primary unit of functionality in a Mozart application. Each View will render exactly one DOM element as a container, either from its template, or programatically. Views can be nested in other views, and are instantiated either by a <a href="/apidocs/layout">Mozart.Layout</a> as the root element of a viewport, by a <code>&#123;{view}&#125;</code> handlebars helper in another view template, or as an item in a <a href="/apidocs/collection">Mozart.Collection</a> instantiated with the <code>&#123;{collection}&#125;</code> helper.</p>
<h2>Constructor/Destructor</h2>
	<h3>init()</h3>
	<p>Initalise the View, generating its document id and assigning its templating behaviour.</p>
	<h3>release()</h3>
	<p>Release the View, tearing down its DOM binds, unbinding all its events, and unregistering it from its parent and its layout.</p>
<h2>Properties</h2>
	<h3>tag</h3>
	<p>Tag is the HTML tag for the base element of the view. The default is <code>div</code>.</p>
	<h3>templateName</h3>
	<p>Contains the Handlebars key for the view's template function. Generally, this will correspond to the original source path of the View's Handlebars template without its <code>.hbs</code> extension, e.g. <code>app/templates/api_docs_view_view</code>.</p>
	<h3>templateFunction</h3>
	<p>Contains the actual template function. This function should return a string that is the <code>innerHtml</code> of the View's element.</p>
	<p><strong>Note:</strong><code>templateFunction</code> is assigned from <code>window.HandlebarsTemplates[@templateName]</code> unless <code>skipTemplate</code> is true.</p>
	<h3>skipTemplate</h3>
	<p>If set to true, View will create only its own element with no content, and all checking for <code>templateName</code> and <code>templateFunction</code> is disabled. This is used for templateless views that programatically render their own content, e.g. <a href="/apidocs/collection">Mozart.Collection</a>.</p>
	<h3>id</h3>
	<p>The View's element document id attribute.</p>
	<h3>disableHtmlAttributes</h3>
	<p>When set to true, View will not copy the contents of <code><em>name</em>Html</code> properties into attributes on its element. This is generally used for compund controls that contain more than one element. The default is <code>false</code>.</p>
	<h3>idPrefix</h3>
	<p>The prefix used on the element's document id. This can be overridden to assist in debugging, or to provide an extra level of namespacing in the DOM. The default is <code>view</code>, producing element ids of the format <code>view-<em>objectId</em></code>.</p>
	<h3>parent</h3>
	<p>The View's parent view, or null if it is a top level view.</p>
	<h3>layout</h3>
	<p>The <a href="/apidocs/layout">Layout</a> the view is registered with.</p>
	<h3>display</h3>
	<p>If true, the view will render its templateFunction when rendered. If false, the view will create only its empty element.</p>
	<p><strong>Note:</strong><code>change:display</code> is bound to <code>redraw</code>, so changing a live view's <code>display</code> property using <code>set</code> will result in the view appearing or disappearing. Subviews in the view template are only instantiated and registered if <code>display</code> is true.</code>
<h2>Instance Methods</h2>
	<h3>prepareElement()</h3>
	<p>Prepare a new element for the view using <code>createElement</code>, and render its template into the element if <code>display</code> is true and <code>skipTemplate</code> is false.</p>
	<p><strong>Note:</strong><code>prepareElement</code> does not modify the view's DOM element. A new element is created off-DOM and stored in the <code>newElement</code> property.</p> 
	<h3>reassignElements()</h3>
	<p>Recursively call <code>reassignElements</code> on all child views, then set the <code>el</code> property to the element returned by <code>findElementInPreparedContext(@id)</code>.</p>
	<h3>findElementInPreparedContent(id)</h3>
	<p>Find and return the element with the supplied id in <code>newElement</code>, using <code>_find</code>.</p>
	<h3>replaceElement()</h3>
	<p>Recursively call <code>replaceElement</code> on all child views, then replace the child element in this View's parent element that corresponds to this View with the element in <code>newElement</code>. If the view has no parent, set this view's <a href="/apidocs/layout">Layout</a>'s <code>rootEl</code> to <code>newElement</code>.</p>
	<p><strong>Note:</strong>The rendering process may be non-trivial to some readers, please see the guide <a href="/guides/understanding_rendering">Understanding Rendering</a>.<p>
	<h3>beforeRender()</h3>
	<p>Called before the view is prepared with <code>prepareElement</code>. Can be overridden to execute custom view preparation code.</p>
	<h3>afterRender()</h3>
	<p>Called after <em>all</em> views are rendered in the current queue when this View is in the queue, this guarantees that this View's (and all its child views) <code>element</code> contains a valid DOM element and exists on the DOM. Can be overridden to execute custom setup code, e.g. finding sub-controls and elements to setup jQuery components, etc.</p>
	<h3>redraw()</h3>
	<p>Queues this view for rendering by calling the View's <a href="/apidocs/layout">Layout</a>'s <code>queueRenderView()</code> method.</p>
	<h3>addView(view)</h3>
	<p>Adds a child view to this view.</p>
	<h3>childView(name)</h3>
	<p>Gets and returns the child view with the supplied name, or <code>undefined</code></p>
	<h3>namedChildViewExists(name)</h3>
	<p>Returns true if a child view with the supplied name exists.</p>
	<h3>releaseChildren()</h3>
	<p>Queues all child views for release by calling the View's <a href="/apidocs/layout">Layout</a>'s <code>queueReleaseView()</code> method for each child view.</p>
	<h3>removeView(view)</h3>
	<p>Remove the supplied child view from this view.</p>
	<h3>hasAncestor(view)</h3>
	<p>Return true if the supplied view is an ancestor of this view.</p>
	<h3>getHtmlAttrsMap()</h3>
	<p>Return a map of <code><em>name</em>Html</code> properties and their values, stripping <code>Html</code> from the key name.</p>
	<h3>copyHtmlAttrsToElement(element)</h3>
	<p>Iterate <code><em>name</em>Html</code> properties</p> on this View and create or assign <code><em>name</em></code> attributes with their values on the supplied element.</p>
	<h3>registerDomBind(bindId, target)</h3>
	<p>Register a DOM bind from the supplied bindId to the specified target.</p>
	<h3>createDomBinds()</h3>
	<p>Find and bind elements with ids as registered with <code>registerDomBind</code> with their appropriate targets.</p>
	<h3>removeDomBinds()</h3>
	<p>Remove all DOM bindings created with <code>createDomBinds</code>.</p>

<h2>Private Methods</h2>
	<h3>_find(element, id)</h3>
	<p>Find and return the child element with the corresponding id in element.</p>
	<p><strong>Note:</strong> _find will work with an element and its children that are not currently attached to the DOM.</p>